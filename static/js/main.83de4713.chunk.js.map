{"version":3,"sources":["store/reducers/auth/types.ts","utils/rules.ts","store/reducers/event/types.ts","api/UserService.ts","store/reducers/auth/action-creators.ts","hook/UseTypeSelector.ts","components/LoginForm.tsx","pages/Login.tsx","utils/data.ts","components/EventCalendar.tsx","components/EventForm.tsx","store/reducers/event/action-creators.ts","router/index.ts","store/reducers/action-creators.ts","hook/useActions.ts","pages/Event.tsx","components/AppRouter.tsx","components/NavBar.tsx","App.tsx","store/reducers/auth/index.tsx","store/reducers/event/index.ts","store/reducers/index.ts","store/index.ts","index.tsx"],"names":["AuthActionEnum","rules","message","required","validator","_","value","isSameOrAfter","moment","Promise","resolve","reject","Error","EventActionEnum","UserService","axios","get","AuthActionCreators","setUser","user","type","SET_USER","payload","setIsAuth","auth","SET_AUTH","setIsLoading","SET_IS_LOADING","setError","SET_ERROR","login","username","password","dispatch","a","setTimeout","getUsers","response","mockUser","data","find","r","localStorage","setItem","e","logout","removeItem","useTypedSelector","useSelector","LoginForm","useDispatch","useState","setUsername","setPassword","state","error","isLoading","onFinish","style","color","Item","label","name","onChange","target","htmlType","loading","Login","justify","align","className","formatDate","date","year","getFullYear","month","getMonth","day","getDate","EventCalendar","props","dateCellRender","formatedDate","toDate","currentDayEvents","events","filter","ev","map","index","description","EventForm","author","guest","event","setEvent","submit","selectDate","guests","Option","RouteNames","EventActionCreators","setGuests","SET_GUESTS","setEvents","SET_EVENTS","fetchGuests","console","log","createEvent","getItem","json","JSON","parse","push","stringify","fetchEvents","currentUserEvents","allActionCreators","useActions","bindActionCreators","Event","modalVisible","setModalVisible","useEffect","onClick","title","visible","footer","onCancel","publicRoutes","path","LOGIN","exact","component","privatRoutes","EVENT","AppRouter","isAuth","route","to","Navbar","router","useHistory","Header","paddingRight","theme","mode","selectable","App","Content","initialState","action","rootReducer","combineReducers","reducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"qKASYA,E,6GCPCC,EACC,eAACC,EAAD,uDAAmB,oGAAnB,MAA4C,CAClDC,UAAU,EACVD,YAHKD,EAKI,SAACC,GAAD,OAAqB,iBAAO,CACrCE,UADqC,SAC3BC,EAAQC,GACd,OAAIA,EAAMC,cAAcC,OACbC,QAAQC,UAEZD,QAAQE,OAAO,IAAIC,MAAMV,Q,2CDHhCF,K,oBAAAA,E,sBAAAA,E,oBAAAA,E,iCAAAA,M,SEAAa,E,oCCHSC,E,oIACjB,uGACWC,IAAMC,IAAa,iBAD9B,2C,6DCCSC,EAAqB,CAC9BC,QAAS,SAACC,GAAD,MAAiC,CAACC,KAAMpB,EAAeqB,SAAUC,QAASH,IACnFI,UAAW,SAACC,GAAD,MAAmC,CAACJ,KAAMpB,EAAeyB,SAAUH,QAASE,IACvFE,aAAc,SAACJ,GAAD,MAA2C,CAACF,KAAMpB,EAAe2B,eAAgBL,YAC/FM,SAAU,SAACN,GAAD,MAAsC,CAACF,KAAMpB,EAAe6B,UAAWP,YACjFQ,MAAO,SAACC,EAAkBC,GAAnB,8CAAwC,WAAOC,GAAP,SAAAC,EAAA,sDAC3C,IACID,EAAShB,EAAmBS,cAAa,IACzCS,WAAU,sBAAC,8BAAAD,EAAA,sEACgBpB,EAAYsB,WAD5B,OACDC,EADC,QAEDC,EAAWD,EAASE,KAAKC,MAAK,SAAAC,GAAC,OAAEA,EAAEV,WAAWA,GAAYU,EAAET,WAAaA,OAE3EU,aAAaC,QAAQ,OAAQ,QAC7BD,aAAaC,QAAQ,WAAYL,EAASP,UAC1CE,EAAShB,EAAmBC,QAAQoB,IACpCL,EAAShB,EAAmBM,WAAU,KAEtCU,EAAShB,EAAmBW,SAAS,oKATlC,2CAWT,KAEFK,EAAShB,EAAmBS,cAAa,IAC5C,MAAOkB,GACJX,EAAShB,EAAmBW,SAAS,wJAlBE,2CAAxC,uDAqBPiB,OAAQ,yDAAM,WAAOZ,GAAP,SAAAC,EAAA,sDACNQ,aAAaI,WAAW,QACxBJ,aAAaI,WAAW,YACxBb,EAAShB,EAAmBC,QAAQ,KACpCe,EAAShB,EAAmBM,WAAU,IAJhC,2CAAN,wDC9BCwB,EAAoDC,I,OCuDlDC,EAlDM,WACnB,IAAMhB,EAAWiB,cADQ,EAESC,mBAAS,IAFlB,mBAEhBpB,EAFgB,KAENqB,EAFM,OAGSD,mBAAS,IAHlB,mBAGhBnB,EAHgB,KAGNqB,EAHM,OAKIN,GAAiB,SAAAO,GAAK,OAAIA,EAAM9B,QAApD+B,EALgB,EAKhBA,MAAOC,EALS,EAKTA,UAKd,OACI,8BACA,eAAC,IAAD,CACIC,SANO,WACXxB,EAAShB,EAAmBa,MAAMC,EAASC,KAI3C,UAGKuB,GAAS,qBAAKG,MAAO,CAACC,MAAO,OAApB,SACLJ,IAEL,cAAC,IAAKK,KAAN,CACIC,MAAM,8FACNC,KAAK,WACL7D,MAAO,CAACA,EAAe,yMAH3B,SAKI,cAAC,IAAD,CACIK,MAAO0B,EACP+B,SAAU,SAAAnB,GAAC,OAAIQ,EAAYR,EAAEoB,OAAO1D,QACpCc,KAAM,eAGd,cAAC,IAAKwC,KAAN,CACIC,MAAM,uCACNC,KAAK,WACL7D,MAAO,CAACA,EAAe,iJAH3B,SAKI,cAAC,IAAD,CACIK,MAAO0B,EACP+B,SAAU,SAAAnB,GAAC,OAAIS,EAAYT,EAAEoB,OAAO1D,QACpCc,KAAM,eAGd,cAAC,IAAKwC,KAAN,UACI,cAAC,IAAD,CAAQxC,KAAK,UAAU6C,SAAS,SAAUC,QAASV,EAAnD,oDClCDW,EAXG,WACd,OAAO,cAAC,IAAD,UACJ,cAAC,IAAD,CAAKC,QAAS,SAAUC,MAAO,SAAUC,UAAU,OAAnD,SACI,cAAC,IAAD,UACI,cAAC,EAAD,W,SCTFC,EAAa,SAACC,GACvB,IAAMC,EAAOD,EAAKE,cACZC,EAAQH,EAAKI,WAAa,GAAlB,WAA2BJ,EAAKI,WAAa,GAAMJ,EAAKI,WAAa,EAC7EC,EAAML,EAAKM,UAAY,GAAjB,WAA0BN,EAAKM,WAAcN,EAAKM,UAC9D,MAAM,GAAN,OAAUL,EAAV,YAAkBE,EAAlB,YAA2BE,IC2BhBE,EArB+B,SAACC,GAc3C,OACI,cAAC,IAAD,CACIC,eAdR,SAAwB3E,GACpB,IAAM4E,EAAeX,EAAWjE,EAAM6E,UAChCC,EAAmBJ,EAAMK,OAAOC,QAAO,SAAAC,GAAE,OAAIA,EAAGf,OAASU,KAC/D,OACI,8BACKE,EAAiBI,KAAI,SAACD,EAAIE,GAAL,OAClB,8BAAkBF,EAAGG,aAAXD,Y,mCCmEfE,EApEuB,SAACX,GAAW,IAAD,EAEnB7B,mBAAiB,CACvCyC,OAAQ,GACRpB,KAAM,GACNkB,YAAa,GACbG,MAAO,KANkC,mBAEtCC,EAFsC,KAE/BC,EAF+B,KAQtC5E,EAAQ4B,GAAiB,SAAAO,GAAK,OAAIA,EAAM9B,QAAxCL,KAYP,OACI,eAAC,IAAD,CAAMsC,SALS,WACfuB,EAAMgB,OAAN,2BAAiBF,GAAjB,IAAwBF,OAAQzE,EAAKY,aAIrC,UACI,cAAC,IAAK6B,KAAN,CACIC,MAAM,8FACNC,KAAK,cACL7D,MAAO,CAACA,KAHZ,SAKI,cAAC,IAAD,CACI8D,SAAU,SAAAnB,GAAC,OAAImD,EAAS,2BAAID,GAAL,IAAYJ,YAAa9C,EAAEoB,OAAO1D,UACzDA,MAAOwF,EAAMJ,gBAGrB,cAAC,IAAK9B,KAAN,CACIC,MAAM,sEACNC,KAAK,OACL7D,MAAO,CAACA,IAAkBA,EAAkB,iLAHhD,SAKI,cAAC,IAAD,CACI8D,SAAU,SAACS,GAAD,OA5BP,SAACA,GACZA,GACAuB,EAAS,2BAAID,GAAL,IAAYtB,KAAMD,EAAWC,EAAKW,aA0Bdc,CAAWzB,QAInC,cAAC,IAAKZ,KAAN,CACIC,MAAM,kFACNC,KAAK,QACL7D,MAAO,CAACA,KAHZ,SAKI,cAAC,IAAD,CAAS8D,SAAU,SAAC8B,GAAD,OAAmBE,EAAS,2BAAID,GAAL,IAAYD,YAA1D,SACKb,EAAMkB,OAAOV,KAAI,SAAAK,GAAK,OACnB,cAAC,IAAOM,OAAR,CAAoC7F,MAAOuF,EAAM9D,SAAjD,SACK8D,EAAM9D,UADS8D,EAAM9D,iBAQ1C,cAAC,IAAD,CAAKqC,QAAQ,MAAb,SACI,cAAC,IAAKR,KAAN,UACI,cAAC,IAAD,CAAQxC,KAAK,UAAU6C,SAAS,SAAhC,gE,kBRnERpD,K,wBAAAA,E,yBAAAA,M,KSFL,ICIKuF,EDJCC,EAAsB,CAC/BC,UAAW,SAAChF,GAAD,MAAwC,CAACF,KAAMP,EAAgB0F,WAAYjF,YACtFkF,UAAW,SAAClF,GAAD,MAAyC,CAACF,KAAMP,EAAgB4F,WAAYnF,YACvFoF,YAAa,yDAAO,WAAOzE,GAAP,eAAAC,EAAA,+EAEWpB,EAAYsB,WAFvB,OAENC,EAFM,OAGZJ,EAASoE,EAAoBC,UAAUjE,EAASE,OAHpC,gDAKZoE,QAAQC,IAAR,MALY,yDAAP,uDAQbC,YAAa,SAACf,GAAD,8CAAoB,WAAO7D,GAAP,iBAAAC,EAAA,sDAC9B,IACUmD,EAAS3C,aAAaoE,QAAQ,WAAa,MAC3CC,EAAOC,KAAKC,MAAM5B,IACnB6B,KAAKpB,GACV7D,EAASoE,EAAoBG,UAAUO,IACvCrE,aAAaC,QAAQ,SAAUqE,KAAKG,UAAUJ,IAEjD,MAAOnE,GACJ+D,QAAQC,IAAIhE,GATc,2CAApB,uDAYbwE,YAAa,SAACrF,GAAD,8CAAsB,WAAOE,GAAP,mBAAAC,EAAA,sDAC/B,IACUmD,EAAS3C,aAAaoE,QAAQ,WAAa,KAC3CC,EAAOC,KAAKC,MAAM5B,GAClBgC,EAAoBN,EAAKzB,QAAO,SAAAC,GAAE,OAAIA,EAAGK,SAAW7D,GAAYwD,EAAGM,QAAU9D,KACnFE,EAASoE,EAAoBG,UAAUa,IACzC,MAAOzE,GACL+D,QAAQC,IAAIhE,GAPe,2CAAtB,wDE3BJ0E,EAAiB,2BACvBrG,GACAoF,GCCMkB,EAAa,WACtB,IAAMtF,EAAWiB,cACjB,OAAOsE,YAAmBF,EAAmBrF,ICoClCwF,EAnCG,WAAM,IAAD,EACqBtE,oBAAS,GAD9B,mBACZuE,EADY,KACEC,EADF,OAEK5E,GAAiB,SAAAO,GAAK,OAAEA,EAAMwC,SAA/CI,EAFY,EAEZA,OAAOb,EAFK,EAELA,OAFK,EAGwBkC,IAAvCb,EAHe,EAGfA,YAAYG,EAHG,EAGHA,YAAYO,EAHT,EAGSA,YACrBjG,EAAQ4B,GAAiB,SAAAO,GAAK,OAAIA,EAAM9B,QAAxCL,KAEPyG,qBAAU,WACNlB,IACAU,EAAYjG,EAAKY,YAClB,IAOH,OAAO,gCAEJ,cAAC,EAAD,CAAesD,OAAQA,IACtB,cAAC,IAAD,CAAKjB,QAAS,SAAd,SACI,cAAC,IAAD,CACIyD,QAAS,kBAAMF,GAAgB,IADnC,2GAIJ,cAAC,IAAD,CACIG,MAAM,8FACNC,QAASL,EACTM,OAAQ,KACRC,SAAU,kBAAMN,GAAgB,IAJpC,SAMC,cAAC,EAAD,CAAWzB,OAAQA,EAAQF,OAnBZ,SAACF,GACjB6B,GAAgB,GAChBd,EAAYf,a,SHXRM,K,eAAAA,E,WAAAA,M,KAKL,IAAM8B,EAAwB,CACjC,CACIC,KAAM/B,EAAWgC,MAAMC,OAAM,EAAKC,UAAWnE,IAKxCoE,EAAwB,CACjC,CAAEJ,KAAM/B,EAAWoC,MAAMH,OAAM,EAAKC,UAAUb,IIWnCgB,EA7BG,WAEd,OADmB1F,GAAiB,SAAAO,GAAK,OAAEA,EAAM9B,QAAxCkH,OAGD,eAAC,IAAD,WACKH,EAAa/C,KAAI,SAAAmD,GAAK,OACpB,cAAC,IAAD,CAAOR,KAAMQ,EAAMR,KACZE,MAAOM,EAAMN,MACbC,UAAWK,EAAML,WACZK,EAAMR,SAGrB,cAAC,IAAD,CAAUS,GAAIxC,EAAWoC,WAI7B,eAAC,IAAD,WACKN,EAAa1C,KAAI,SAAAmD,GAAK,OACnB,cAAC,IAAD,CAAOR,KAAMQ,EAAMR,KACZE,MAAOM,EAAMN,MACbC,UAAWK,EAAML,WACZK,EAAMR,SAGtB,cAAC,IAAD,CAAUS,GAAIxC,EAAWgC,Y,SCsB1BS,EA1CI,WACf,IAAMC,EAASC,cADM,EAEEhG,GAAiB,SAAAO,GAAK,OAAIA,EAAM9B,QAAhDkH,EAFc,EAEdA,OAAQvH,EAFM,EAENA,KACR0B,EAAU0E,IAAV1E,OAKP,OACI,cAAC,IAAOmG,OAAR,UACI,cAAC,IAAD,CAAK5E,QAAQ,MAAb,SACKsE,EAEG,qCACI,qBAAKhF,MAAO,CAACC,MAAM,QAASsF,aAAa,QAAzC,SAAmD9H,EAAKY,WACxD,cAAC,IAAD,CAAMmH,MAAM,OAAOC,KAAK,aAAaC,YAAY,EAAjD,SACI,cAAC,IAAKxF,KAAN,CACIiE,QAAShF,EADb,2CAES,QAOjB,qCACI,qBAAKa,MAAO,CAACC,MAAM,QAASsF,aAAa,QAAzC,4CACA,cAAC,IAAD,CAAMC,MAAM,OAAOC,KAAK,aAAaC,YAAY,EAAjD,SACI,cAAC,IAAKxF,KAAN,CACIiE,QAAS,kBAAMiB,EAAO5B,KAAKd,EAAWgC,QAD1C,2CAES,a,OCTtBiB,MArBf,WAAgB,IAAD,EACkB9B,IAAtBrG,EADI,EACJA,QAASK,EADL,EACKA,UAQlB,OANEqG,qBAAU,WACHlF,aAAaoE,QAAQ,UACpB5F,EAAQ,CAACa,SAAUW,aAAaoE,QAAQ,cACxCvF,GAAU,MAEf,IAED,eAAC,IAAD,WACI,cAAC,EAAD,IACA,cAAC,IAAO+H,QAAR,UACI,cAAC,EAAD,U,UCjBRC,GAA0B,CAC5Bb,QAAQ,EACRnF,MAAO,GACPC,WAAW,EACXrC,KAAM,ICPV,IAAMoI,GAA2B,CAC7BlE,OAAQ,GACRa,OAAQ,ICFG,QACX1E,KFSW,WAA2E,IAAtD8B,EAAqD,uDAA7CiG,GAAcC,EAA+B,uCACrF,OAAQA,EAAOpI,MACX,KAAKpB,EAAeyB,SAChB,OAAO,2BAAI6B,GAAX,IAAkBoF,OAAQc,EAAOlI,QAASkC,WAAW,IACzD,KAAKxD,EAAeqB,SAChB,OAAO,2BAAIiC,GAAX,IAAkBnC,KAAMqI,EAAOlI,UACnC,KAAKtB,EAAe6B,UAChB,OAAO,2BAAIyB,GAAX,IAAkBC,MAAOiG,EAAOlI,QAASkC,WAAW,IACxD,KAAKxD,EAAe2B,eAChB,OAAO,2BAAI2B,GAAX,IAAkBE,UAAWgG,EAAOlI,UACxC,QACI,OAAOgC,IEnBfwC,MDGW,WAA8E,IAAxDxC,EAAuD,uDAA/CiG,GAAcC,EAAiC,uCACxF,OAAQA,EAAOpI,MACX,KAAKP,EAAgB0F,WACjB,OAAO,2BAAIjD,GAAX,IAAkB4C,OAAQsD,EAAOlI,UACrC,KAAKT,EAAgB4F,WACjB,OAAO,2BAAInD,GAAX,IAAkB+B,OAAQmE,EAAOlI,UACrC,QACI,OAAOgC,KEXbmG,GAAcC,YAAgBC,IAEvBC,GAAQC,YAAYJ,GAAaK,YAAgBC,O,UCC9DC,IAASC,OACL,cAAC,IAAD,CAAUL,MAAOA,GAAjB,SACI,cAAC,KAAD,UACI,cAAC,EAAD,QAIVM,SAASC,eAAe,W","file":"static/js/main.83de4713.chunk.js","sourcesContent":["import {IUser} from \"../../../models/IUser\";\r\n\r\nexport interface AuthState {\r\n    isAuth: boolean;\r\n    user: IUser;\r\n    isLoading: boolean;\r\n    error: string;\r\n}\r\n\r\nexport enum AuthActionEnum {\r\n    SET_AUTH = \"SET_AUTH\",\r\n    SET_ERROR = \"SET_ERROR\",\r\n    SET_USER = \"SET_USER\",\r\n    SET_IS_LOADING = \"SET_IS_LOADING\",\r\n}\r\n\r\nexport interface SetAuthAction {\r\n    type: AuthActionEnum.SET_AUTH;\r\n    payload: boolean;\r\n}\r\nexport interface SetErrorAction {\r\n    type: AuthActionEnum.SET_ERROR;\r\n    payload: string;\r\n}\r\nexport interface SetUserAction {\r\n    type: AuthActionEnum.SET_USER;\r\n    payload: IUser\r\n}\r\nexport interface SetIsLoadingAction {\r\n    type: AuthActionEnum.SET_IS_LOADING;\r\n    payload: boolean;\r\n}\r\n\r\nexport type AuthAction =\r\n    SetAuthAction |\r\n    SetUserAction |\r\n    SetErrorAction |\r\n    SetIsLoadingAction","import moment, {Moment} from \"moment\";\r\n\r\nexport const rules = {\r\n    required: (message: string = \"Обязательное поле\") => ({\r\n        required: true,\r\n        message\r\n    }),\r\n    isDateAfter: (message: string) => () => ({\r\n        validator(_: any, value: Moment) {\r\n            if (value.isSameOrAfter(moment())) {\r\n                return Promise.resolve()\r\n            }\r\n            return Promise.reject(new Error(message));\r\n        }\r\n    })\r\n}","import {IUser} from \"../../../models/IUser\";\r\nimport {IEvent} from \"../../../models/IEvent\";\r\n\r\n\r\nexport interface EventState {\r\n    guests: IUser[];\r\n    events: IEvent[];\r\n}\r\n\r\nexport enum EventActionEnum {\r\n    SET_GUESTS = \"SET_GUESTS\",\r\n    SET_EVENTS = \"SET_EVENTS\"\r\n}\r\n\r\nexport interface SetGuestsAction {\r\n    type: EventActionEnum.SET_GUESTS;\r\n    payload: IUser[]\r\n}\r\n\r\nexport interface SetEventsAction {\r\n    type: EventActionEnum.SET_EVENTS;\r\n    payload: IEvent[]\r\n}\r\n\r\nexport type EventAction =\r\n    SetGuestsAction |\r\n    SetEventsAction","\r\n\r\n\r\nimport axios, {AxiosResponse} from \"axios\";\r\nimport {IUser} from \"../models/IUser\";\r\n\r\nexport default class UserService {\r\n    static async getUsers(): Promise<AxiosResponse<IUser[]>> {\r\n        return axios.get<IUser[]>('./users.json')\r\n    }\r\n}","import {AuthActionEnum, SetAuthAction, SetErrorAction, SetIsLoadingAction, SetUserAction} from \"./types\";\r\nimport {IUser} from \"../../../models/IUser\";\r\nimport {AppDispatch} from \"../../index\";\r\nimport axios from \"axios\";\r\nimport UserService from \"../../../api/UserService\";\r\n\r\n\r\n\r\nexport const AuthActionCreators = {\r\n    setUser: (user: IUser): SetUserAction => ({type: AuthActionEnum.SET_USER, payload: user}),\r\n    setIsAuth: (auth: boolean): SetAuthAction => ({type: AuthActionEnum.SET_AUTH, payload: auth}),\r\n    setIsLoading: (payload: boolean): SetIsLoadingAction => ({type: AuthActionEnum.SET_IS_LOADING, payload}),\r\n    setError: (payload: string): SetErrorAction => ({type: AuthActionEnum.SET_ERROR, payload}),\r\n    login: (username: string, password: string) => async (dispatch: AppDispatch) => {\r\n        try {\r\n            dispatch(AuthActionCreators.setIsLoading(true))\r\n            setTimeout(async ()=>{\r\n                const response = await UserService.getUsers()\r\n                const mockUser = response.data.find(r=>r.username===username && r.password === password)\r\n                if(mockUser){\r\n                    localStorage.setItem('auth', 'true');\r\n                    localStorage.setItem('username', mockUser.username);\r\n                    dispatch(AuthActionCreators.setUser(mockUser));\r\n                    dispatch(AuthActionCreators.setIsAuth(true))\r\n                }else {\r\n                    dispatch(AuthActionCreators.setError('Некорректный логин или пароль'));\r\n                }\r\n            },1000)\r\n\r\n            dispatch(AuthActionCreators.setIsLoading(false));\r\n        }catch (e){\r\n            dispatch(AuthActionCreators.setError('Произошла ошибка при логине'))\r\n        }\r\n        },\r\n    logout: () => async (dispatch: AppDispatch) => {\r\n            localStorage.removeItem('auth')\r\n            localStorage.removeItem('username')\r\n            dispatch(AuthActionCreators.setUser({} as IUser));\r\n            dispatch(AuthActionCreators.setIsAuth(false))\r\n\r\n    }\r\n\r\n\r\n}","\r\nimport {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\nimport {RootState} from \"../store\";\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector","import React, {FC, useState} from 'react';\r\nimport {Button, Form, Input} from \"antd\";\r\nimport {rules} from \"../utils/rules\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {AuthActionCreators} from \"../store/reducers/auth/action-creators\";\r\nimport {useTypedSelector} from \"../hook/UseTypeSelector\";\r\n\r\n\r\n\r\nconst LoginForm:FC = () => {\r\n  const dispatch = useDispatch()\r\n    const [username, setUsername] = useState('')\r\n    const [password, setPassword] = useState('')\r\n\r\n    const {error, isLoading} = useTypedSelector(state => state.auth);\r\n\r\n    const submit = () => {\r\n        dispatch(AuthActionCreators.login(username,password))\r\n    }\r\n    return (\r\n        <div>\r\n        <Form\r\n            onFinish={submit}\r\n        >\r\n            {error && <div style={{color: 'red'}}>\r\n                {error}\r\n            </div>}\r\n            <Form.Item\r\n                label=\"Имя пользователя\"\r\n                name=\"username\"\r\n                rules={[rules.required(\"Пожалуйста введите имя пользователя!\")]}\r\n            >\r\n                <Input\r\n                    value={password}\r\n                    onChange={e => setUsername(e.target.value)}\r\n                    type={\"username\"}\r\n                />\r\n            </Form.Item>\r\n            <Form.Item\r\n                label=\"Пароль\"\r\n                name=\"password\"\r\n                rules={[rules.required(\"Пожалуйста введите пароль\")]}\r\n            >\r\n                <Input\r\n                    value={password}\r\n                    onChange={e => setPassword(e.target.value)}\r\n                    type={\"password\"}\r\n                />\r\n            </Form.Item>\r\n            <Form.Item>\r\n                <Button type=\"primary\" htmlType=\"submit\"  loading={isLoading}>\r\n                    Войти\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LoginForm;","import {FC} from \"react\";\r\nimport {Card, Layout, Row} from \"antd\";\r\nimport LoginForm from \"../components/LoginForm\";\r\n\r\n\r\nconst Login: FC = ()=> {\r\n    return <Layout>\r\n       <Row justify={\"center\"} align={\"middle\"} className='h100'>\r\n           <Card>\r\n               <LoginForm/>\r\n           </Card>\r\n\r\n       </Row>\r\n    </Layout>\r\n}\r\n\r\nexport default Login","export const formatDate = (date: Date): string => {\r\n    const year = date.getFullYear();\r\n    const month = date.getMonth() < 10 ? `0${date.getMonth() + 1}` : date.getMonth() + 1\r\n    const day = date.getDate() < 10 ? `0${date.getDate()}` : date.getDate()\r\n    return `${year}.${month}.${day}`\r\n}","import React, {FC} from 'react';\r\nimport {Calendar} from \"antd\";\r\nimport {IEvent} from \"../models/IEvent\";\r\nimport {Moment} from \"moment\";\r\nimport {formatDate} from \"../utils/data\";\r\n\r\ninterface EventCalendarProps {\r\n    events: IEvent[];\r\n}\r\n\r\nconst EventCalendar: FC<EventCalendarProps> = (props) => {\r\n\r\n    function dateCellRender(value: Moment) {\r\n        const formatedDate = formatDate(value.toDate());\r\n        const currentDayEvents = props.events.filter(ev => ev.date === formatedDate);\r\n        return (\r\n            <div>\r\n                {currentDayEvents.map((ev, index) =>\r\n                    <div key={index}>{ev.description}</div>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Calendar\r\n            dateCellRender={dateCellRender}\r\n        />\r\n    );\r\n};\r\n\r\nexport default EventCalendar;","import React, {FC, useState} from 'react';\r\nimport {Button, DatePicker, Form, Input, Row, Select} from \"antd\";\r\nimport {rules} from \"../utils/rules\";\r\nimport {IUser} from \"../models/IUser\";\r\nimport {IEvent} from \"../models/IEvent\";\r\nimport {formatDate} from \"../utils/data\";\r\nimport {Moment} from \"moment\";\r\nimport {useTypedSelector} from \"../hook/UseTypeSelector\";\r\n\r\n\r\ninterface EventFormProps {\r\n    guests: IUser[],\r\n    submit: (event: IEvent) => void\r\n}\r\n\r\n\r\n\r\nconst EventForm: FC<EventFormProps> = (props) => {\r\n\r\n    const [event, setEvent] = useState<IEvent>({\r\n        author: '',\r\n        date: '',\r\n        description: '',\r\n        guest: ''\r\n    } as IEvent);\r\n    const {user} = useTypedSelector(state => state.auth)\r\n\r\n    const selectDate = (date: Moment | null) => {\r\n        if (date) {\r\n            setEvent({...event, date: formatDate(date.toDate())})\r\n        }\r\n    }\r\n\r\n    const submitForm = () => {\r\n        props.submit({...event, author: user.username})\r\n    }\r\n\r\n    return (\r\n        <Form onFinish={submitForm}>\r\n            <Form.Item\r\n                label=\"Описание события\"\r\n                name=\"description\"\r\n                rules={[rules.required()]}\r\n            >\r\n                <Input\r\n                    onChange={e => setEvent({...event, description: e.target.value})}\r\n                    value={event.description}\r\n                />\r\n            </Form.Item>\r\n            <Form.Item\r\n                label=\"Дата события\"\r\n                name=\"date\"\r\n                rules={[rules.required(), rules.isDateAfter(\"Нельзя создать событие в прошлом\")]}\r\n            >\r\n                <DatePicker\r\n                    onChange={(date) => selectDate(date)}\r\n                />\r\n            </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Выберите гостя\"\r\n                    name=\"guest\"\r\n                    rules={[rules.required()]}\r\n                >\r\n                    <Select  onChange={(guest: string) => setEvent({...event, guest})}>\r\n                        {props.guests.map(guest =>\r\n                            <Select.Option key={guest.username} value={guest.username}>\r\n                                {guest.username}\r\n                            </Select.Option>\r\n                        )}\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n\r\n            <Row justify=\"end\">\r\n                <Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Создать\r\n                    </Button>\r\n                </Form.Item>\r\n            </Row>\r\n        </Form>\r\n    );\r\n};\r\n\r\nexport default EventForm;","import {IUser} from \"../../../models/IUser\";\r\nimport {EventActionEnum, SetEventsAction, SetGuestsAction} from \"./types\";\r\nimport {IEvent} from \"../../../models/IEvent\";\r\nimport {AppDispatch} from \"../../index\";\r\nimport UserService from \"../../../api/UserService\";\r\n\r\n\r\nexport const EventActionCreators = {\r\n    setGuests: (payload: IUser[]): SetGuestsAction => ({type: EventActionEnum.SET_GUESTS, payload}),\r\n    setEvents: (payload: IEvent[]): SetEventsAction => ({type: EventActionEnum.SET_EVENTS, payload}),\r\n    fetchGuests: () =>  async (dispatch: AppDispatch) => {\r\n        try {\r\n            const response = await UserService.getUsers()\r\n            dispatch(EventActionCreators.setGuests(response.data));\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    },\r\n    createEvent: (event: IEvent) =>  async (dispatch: AppDispatch) =>{\r\n       try{\r\n           const events = localStorage.getItem(\"events\") || '[]'\r\n           const json = JSON.parse(events) as IEvent[];\r\n           json.push(event);\r\n           dispatch(EventActionCreators.setEvents(json));\r\n           localStorage.setItem('events', JSON.stringify(json));\r\n\r\n       }catch (e){\r\n           console.log(e)\r\n       }\r\n    },\r\n    fetchEvents: (username: string) => async (dispatch: AppDispatch) => {\r\n        try {\r\n            const events = localStorage.getItem(\"events\") || '[]'\r\n            const json = JSON.parse(events) as IEvent[];\r\n            const currentUserEvents = json.filter(ev => ev.author === username || ev.guest === username);\r\n            dispatch(EventActionCreators.setEvents(currentUserEvents));\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n\r\n}\r\n","import React from \"react\";\r\nimport Login from \"../pages/Login\";\r\nimport Event from \"../pages/Event\";\r\n\r\nexport interface  IRoute {\r\n    path:string;\r\n    component: React.ComponentType;\r\n    exact?:boolean\r\n\r\n}\r\n\r\nexport enum RouteNames {\r\n    LOGIN= '/login',\r\n    EVENT= '/'\r\n}\r\n\r\nexport const publicRoutes:IRoute[] = [\r\n    {\r\n        path: RouteNames.LOGIN,exact:true,component: Login\r\n    }\r\n]\r\n\r\n\r\nexport const privatRoutes:IRoute[] = [\r\n    { path: RouteNames.EVENT,exact:true,component:Event }\r\n]","import {AuthActionCreators} from \"./auth/action-creators\";\r\nimport {EventActionCreators} from \"./event/action-creators\";\r\n\r\nexport const allActionCreators = {\r\n    ...AuthActionCreators,\r\n    ...EventActionCreators\r\n}\r\n","import {useDispatch} from \"react-redux\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {allActionCreators} from \"../store/reducers/action-creators\";\r\n\r\n\r\n\r\nexport const useActions = () => {\r\n    const dispatch = useDispatch();\r\n    return bindActionCreators(allActionCreators, dispatch);\r\n}","import {FC, useEffect, useState} from \"react\";\r\nimport EventCalendar from \"../components/EventCalendar\";\r\nimport {Row, Button, Modal} from \"antd\";\r\nimport EventForm from \"../components/EventForm\";\r\nimport {useActions} from \"../hook/useActions\";\r\nimport {useTypedSelector} from \"../hook/UseTypeSelector\";\r\nimport {IEvent} from \"../models/IEvent\";\r\n\r\n\r\nconst Event: FC = ()=> {\r\n    const [modalVisible, setModalVisible] = useState(false);\r\n    const {guests,events} = useTypedSelector(state=>state.event)\r\n const {fetchGuests,createEvent,fetchEvents} = useActions()\r\n    const {user} = useTypedSelector(state => state.auth);\r\n\r\n    useEffect(() => {\r\n        fetchGuests()\r\n        fetchEvents(user.username);\r\n    }, [])\r\n\r\n    const addNewEvent = (event: IEvent) => {\r\n        setModalVisible(false);\r\n        createEvent(event);\r\n    }\r\n\r\n    return <div>\r\n\r\n       <EventCalendar events={events}/>\r\n        <Row justify={\"center\"}>\r\n            <Button\r\n                onClick={() => setModalVisible(true)}\r\n            >Добавить событие</Button>\r\n        </Row>\r\n        <Modal\r\n            title=\"Добавить событие\"\r\n            visible={modalVisible}\r\n            footer={null}\r\n            onCancel={() => setModalVisible(false)}\r\n        >\r\n         <EventForm guests={guests} submit={addNewEvent}/>\r\n        </Modal>\r\n    </div>\r\n}\r\n\r\nexport default Event","import React from 'react';\r\nimport {Switch,Route,Redirect} from \"react-router-dom\";\r\nimport {privatRoutes, publicRoutes, RouteNames} from \"../router\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {useTypedSelector} from \"../hook/UseTypeSelector\";\r\n\r\nconst AppRouter = () => {\r\n       const{isAuth} = useTypedSelector(state=>state.auth)\r\n    return (\r\n        isAuth ?\r\n            <Switch>\r\n                {privatRoutes.map(route=>\r\n                   <Route path={route.path}\r\n                          exact={route.exact}\r\n                          component={route.component}\r\n                          key={route.path}\r\n                   />\r\n                )}\r\n                <Redirect to={RouteNames.EVENT}/>\r\n            </Switch>\r\n\r\n            :\r\n            <Switch>\r\n                {publicRoutes.map(route=>\r\n                    <Route path={route.path}\r\n                           exact={route.exact}\r\n                           component={route.component}\r\n                           key={route.path}\r\n                    />\r\n                )}\r\n                <Redirect to={RouteNames.LOGIN}/>\r\n            </Switch>\r\n    );\r\n};\r\n\r\nexport default AppRouter;","import React, {FC} from 'react';\r\nimport {Layout, Menu, Row} from \"antd\";\r\nimport {useHistory} from 'react-router-dom';\r\nimport {RouteNames} from \"../router\";\r\nimport {useTypedSelector} from \"../hook/UseTypeSelector\";\r\nimport {AuthActionCreators} from \"../store/reducers/auth/action-creators\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useActions} from \"../hook/useActions\";\r\n\r\n\r\nconst Navbar: FC = () => {\r\n    const router = useHistory()\r\n    const {isAuth, user} = useTypedSelector(state => state.auth);\r\n    const {logout} = useActions()\r\n\r\n\r\n\r\n\r\n    return (\r\n        <Layout.Header>\r\n            <Row justify=\"end\">\r\n                {isAuth\r\n                    ?\r\n                    <>\r\n                        <div style={{color:'white', paddingRight:'10px'}}>{user.username}</div>\r\n                        <Menu theme=\"dark\" mode=\"horizontal\" selectable={false}>\r\n                            <Menu.Item\r\n                                onClick={logout}\r\n                                key={1}\r\n                            >\r\n                                Выйти\r\n                            </Menu.Item>\r\n                        </Menu>\r\n                    </>\r\n                    :\r\n                    <>\r\n                        <div style={{color:'white', paddingRight:'10px'}}>Войти</div>\r\n                        <Menu theme=\"dark\" mode=\"horizontal\" selectable={false}>\r\n                            <Menu.Item\r\n                                onClick={() => router.push(RouteNames.LOGIN)}\r\n                                key={1}\r\n                            >\r\n                                Логин\r\n                            </Menu.Item>\r\n                        </Menu>\r\n                    </>\r\n                }\r\n            </Row>\r\n        </Layout.Header>\r\n    );\r\n};\r\n\r\nexport default Navbar;","import AppRouter from \"./components/AppRouter\";\nimport Navbar from \"./components/NavBar\";\nimport {Layout} from \"antd\";\nimport './App.css'\nimport {useEffect} from \"react\";\nimport {IUser} from \"./models/IUser\";\nimport {useActions} from \"./hook/useActions\";\n\n\n\nfunction App() {\n    const {setUser, setIsAuth} = useActions();\n\n    useEffect(() => {\n        if(localStorage.getItem('auth')) {\n            setUser({username: localStorage.getItem('username' || '')} as IUser)\n            setIsAuth(true);\n        }\n    }, [])\n  return (\n      <Layout>\n          <Navbar/>\n          <Layout.Content>\n              <AppRouter/>\n          </Layout.Content>\n\n      </Layout>\n\n  );\n}\n\nexport default App;\n","\r\n\r\nimport {AuthAction, AuthActionEnum, AuthState} from \"./types\";\r\nimport {IUser} from \"../../../models/IUser\";\r\n\r\n\r\nconst initialState: AuthState = {\r\n    isAuth: false,\r\n    error: '',\r\n    isLoading: false,\r\n    user: {} as IUser\r\n}\r\n\r\nexport default function authReducer(state = initialState, action: AuthAction): AuthState {\r\n    switch (action.type) {\r\n        case AuthActionEnum.SET_AUTH:\r\n            return {...state, isAuth: action.payload, isLoading: false}\r\n        case AuthActionEnum.SET_USER:\r\n            return {...state, user: action.payload}\r\n        case AuthActionEnum.SET_ERROR:\r\n            return {...state, error: action.payload, isLoading: false}\r\n        case AuthActionEnum.SET_IS_LOADING:\r\n            return {...state, isLoading: action.payload}\r\n        default:\r\n            return state;\r\n    }\r\n}","import {EventAction, EventActionEnum, EventState} from \"./types\";\r\n\r\n\r\nconst initialState: EventState = {\r\n    events: [],\r\n    guests: []\r\n}\r\n\r\nexport default function EventReducer(state = initialState, action: EventAction): EventState {\r\n    switch (action.type) {\r\n        case EventActionEnum.SET_GUESTS:\r\n            return {...state, guests: action.payload}\r\n        case EventActionEnum.SET_EVENTS:\r\n            return {...state, events: action.payload}\r\n        default:\r\n            return state;\r\n    }\r\n}","import auth from './auth'\r\nimport event from './event';\r\n\r\nexport default {\r\n    auth,\r\n    event\r\n}","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from 'redux-thunk';\r\nimport reducers from './reducers';\r\n\r\nconst rootReducer = combineReducers(reducers)\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppDispatch = typeof store.dispatch;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store\";\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n            <App/>\n        </BrowserRouter>\n    </Provider>,\n\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}